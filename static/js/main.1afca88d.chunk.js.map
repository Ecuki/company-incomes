{"version":3,"sources":["components/MyTable/MyTable.js","components/Spinner/Spinner.js","components/CompanyDetails/CompanyDetails.js","components/Calendar/Calendar.js","components/Chart/Chart.js","components/helpers/helpers.js","components/Company/Company.js","components/NotFoundPage/NotFoundPage.js","components/App/App.js","serviceWorker.js","index.js"],"names":["MyTable","companies","loading","useState","data","setData","isInitialMount","useRef","useEffect","current","columns","title","field","type","map","c","render","row","to","id","lookup","isLoading","options","headerStyle","backgroundColor","color","fontWeight","activeSortIcon","opacity","inactiveSortIcon","Spinner","className","CompanyDetails","text","Calendar","date","onChange","startDate","Date","start","endDate","end","actualDate","selected","selectsStart","maxDate","selectsEnd","minDate","Chart","setLoading","dataSet","setDataSet","keys","indexBy","margin","top","right","bottom","left","colors","borderColor","from","modifiers","axisTop","axisRight","layout","maxValue","Math","max","apply","o","value","axisBottom","tickSize","tickPadding","tickValues","tickRotation","legend","legendPosition","legendOffset","format","axisLeft","padding","labelSkipWidth","labelSkipHeight","labelTextColor","animate","motionStiffness","motionDamping","sum","arr","reduce","a","b","toFixed","Company","fun","company","name","city","incomes","income","average","total","months","periodIncomes","setPeriodIncomese","details","setHours","setDate","getTime","calcPeriodIncomes","useMountEffect","getMonthsIncomes","dates","slice","Array","Set","month","monthIcomes","filterIncomes","filter","incomeDate","length","detail","key","NotFoundPage","App","URL_COMPANIES","URL_INCOMES","hasError","setErrors","setCompanies","fetch","json","Promise","all","item","res","sort","fetchData","path","exact","component","props","match","params","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1afca88d.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport \"./MyTable.scss\";\r\nimport MaterialTable from \"material-table\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function MyTable({ companies, loading }) {\r\n  const [data, setData] = useState(companies);\r\n\r\n  const isInitialMount = useRef(true);\r\n\r\n  useEffect(() => {\r\n    if (isInitialMount.current) {\r\n      isInitialMount.current = false;\r\n    } else {\r\n      setData(companies);\r\n    }\r\n  }, [companies]);\r\n\r\n  const columns = [\r\n    {\r\n      title: \"ID\",\r\n      field: \"id\",\r\n      type: \"numeric\"\r\n    },\r\n    { title: \"Name\", field: \"name\" },\r\n    { title: \"City\", field: \"city\" },\r\n    {\r\n      title: \"Total income\",\r\n      field: \"income\",\r\n      type: \"numeric\"\r\n    }\r\n  ].map(c => ({\r\n    render: row => (\r\n      <Link to={`/${row.id}`}>\r\n        {c.lookup ? c.lookup[row[c.field]] : row[c.field]}\r\n      </Link>\r\n    ),\r\n    ...c\r\n  }));\r\n\r\n  return (\r\n    <MaterialTable\r\n      title=\"Company Incomes\"\r\n      columns={columns}\r\n      data={data}\r\n      isLoading={data[0] ? false : true}\r\n      options={{\r\n        headerStyle: {\r\n          backgroundColor: \"#9933ff\",\r\n          color: \"#fff\",\r\n          fontWeight: 600\r\n        },\r\n        activeSortIcon: {\r\n          opacity: 0.5\r\n        },\r\n        inactiveSortIcon: {\r\n          opacity: 0.7\r\n        }\r\n      }}\r\n    />\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./Spinner.scss\";\r\n\r\nexport default function Spinner() {\r\n  return <div id=\"spinner\" className=\"spinner\"></div>;\r\n}\r\n","import React from \"react\";\r\nimport Spinner from \"../Spinner\";\r\nimport \"./CompanyDetails.scss\";\r\n\r\nexport default function CompanyDetails({ className, text, data }) {\r\n  return (\r\n    <div className={`company__details company__${className}`}>\r\n      <span>{text}</span>\r\n      <span>{data !== \"\" ? data : <Spinner />}</span>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport \"./Calendar.scss\";\r\n\r\nexport default function Calendar({ date, onChange }) {\r\n  const startDate = new Date(date.start);\r\n  const endDate = new Date(date.end);\r\n  const actualDate = new Date();\r\n\r\n  return (\r\n    <div className=\"calendar\">\r\n      <div className=\"calendar__element\">\r\n        <span>Start:</span>\r\n        <DatePicker\r\n          selected={startDate}\r\n          onChange={date => onChange(date, endDate)}\r\n          selectsStart\r\n          startDate={startDate}\r\n          endDate={endDate}\r\n          maxDate={endDate}\r\n        />\r\n      </div>\r\n      <div className=\"calendar__element\">\r\n        <span>End:</span>\r\n        <DatePicker\r\n          selected={endDate}\r\n          onChange={date => onChange(startDate, date)}\r\n          selectsEnd\r\n          startDate={startDate}\r\n          endDate={endDate}\r\n          minDate={startDate}\r\n          maxDate={actualDate}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useState, useRef } from \"react\";\r\nimport { ResponsiveBar } from \"@nivo/bar\";\r\nimport Spinner from \"../Spinner\";\r\nimport \"./Chart.scss\";\r\n\r\nexport default function Chart({ data }) {\r\n  const [loading, setLoading] = useState(true);\r\n  const [dataSet, setDataSet] = useState(data);\r\n\r\n  const isInitialMount = useRef(true);\r\n\r\n  useEffect(() => {\r\n    if (isInitialMount.current) {\r\n      isInitialMount.current = false;\r\n    } else {\r\n      setDataSet(data);\r\n      setLoading(false);\r\n    }\r\n  }, [data]);\r\n\r\n  return (\r\n    <div className=\"chart\">\r\n      {!loading ? (\r\n        <ResponsiveBar\r\n          className=\"myChart\"\r\n          data={dataSet}\r\n          keys={[\"value\"]}\r\n          indexBy=\"date\"\r\n          margin={{ top: 10, right: 30, bottom: 30, left: 90 }}\r\n          colors={\"#222299\"}\r\n          borderColor={{ from: \"color\", modifiers: [[\"darker\", 1.6]] }}\r\n          axisTop={null}\r\n          axisRight={null}\r\n          layout=\"horizontal\"\r\n          maxValue={\r\n            Math.max.apply(\r\n              Math,\r\n              dataSet.map(function(o) {\r\n                return o.value;\r\n              })\r\n            ) + 5000\r\n          }\r\n          axisBottom={{\r\n            tickSize: 5,\r\n            tickPadding: 5,\r\n            tickValues: 7,\r\n            tickRotation: 0,\r\n            legend: null,\r\n            legendPosition: \"end\",\r\n            legendOffset: 32,\r\n            format: \".0s\"\r\n          }}\r\n          axisLeft={{\r\n            tickSize: 5,\r\n            tickPadding: 5,\r\n            tickRotation: 0,\r\n            legend: null,\r\n            legendPosition: \"middle\",\r\n            legendOffset: -60\r\n          }}\r\n          padding={0.3}\r\n          labelSkipWidth={12}\r\n          labelSkipHeight={12}\r\n          labelTextColor={\"transparent\"}\r\n          animate={true}\r\n          motionStiffness={90}\r\n          motionDamping={15}\r\n        />\r\n      ) : (\r\n        <Spinner />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","export function sum(arr) {\r\n  let sum = arr.reduce((a, b) => a + b.value * 1, 0).toFixed(2);\r\n  return sum;\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport CompanyDetails from \"../CompanyDetails\";\r\nimport Calendar from \"../Calendar\";\r\nimport Chart from \"../Chart\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { sum } from \"../helpers\";\r\nimport \"./Company.scss\";\r\n\r\nfunction Company({ company }) {\r\n  const [data, setData] = useState({\r\n    id: \"\",\r\n    name: \"\",\r\n    city: \"\",\r\n    incomes: \"\",\r\n    income: \"\"\r\n  });\r\n\r\n  const [periodIncomes, setPeriodIncomese] = useState({\r\n    average: \"\",\r\n    total: \"\",\r\n    months: [\r\n      {\r\n        income: \"\",\r\n        date: \"\"\r\n      }\r\n    ]\r\n  });\r\n\r\n  const details = [\r\n    [\"name\", \"Name:\", data.name],\r\n    [\"ID\", \"ID:\", data.id],\r\n    [\"city\", \"City:\", data.city],\r\n    [\"income\", \"Total income:\", data.income],\r\n    [\"income-average\", \"Average incomes:\", periodIncomes.average],\r\n    [\"income-period\", \"Income for period:\", periodIncomes.total]\r\n  ];\r\n\r\n  const [date, setDate] = useState({\r\n    start: new Date(new Date().setHours(0, 0, 0, 0)).setDate(1),\r\n    end: new Date().getTime()\r\n  });\r\n\r\n  const useMountEffect = fun => useEffect(fun, []);\r\n  const useDateEffect = fun => useEffect(fun, [date]);\r\n\r\n  useDateEffect(() => {\r\n    if (company) {\r\n      const periodIncomes = calcPeriodIncomes();\r\n      setPeriodIncomese(periodIncomes);\r\n    }\r\n  });\r\n\r\n  useMountEffect(() => {\r\n    if (company) {\r\n      setData(company);\r\n      const periodIncomes = calcPeriodIncomes();\r\n      setPeriodIncomese(periodIncomes);\r\n    }\r\n  });\r\n\r\n  const getMonthsIncomes = incomes => {\r\n    const dates = incomes.map(income => income.date.slice(0, 7));\r\n    const months = Array.from(new Set(dates));\r\n    const monthsIncomes = months.map(month => {\r\n      let monthIcomes = 0;\r\n      incomes.map(\r\n        income =>\r\n          (monthIcomes +=\r\n            income.date.slice(0, 7) === month ? income.value * 1 : 0)\r\n      );\r\n      return {\r\n        value: monthIcomes.toFixed(2) * 1,\r\n        date: month\r\n      };\r\n    });\r\n    return monthsIncomes;\r\n  };\r\n  const calcPeriodIncomes = () => {\r\n    const incomes = company.incomes;\r\n    let filterIncomes = incomes.filter(income => {\r\n      const incomeDate = new Date(income.date).getTime();\r\n      return incomeDate >= date.start && incomeDate < date.end ? true : false;\r\n    });\r\n\r\n    const total = sum(filterIncomes) * 1;\r\n    const average = (total / filterIncomes.length).toFixed(2);\r\n    return {\r\n      average: average > 0 ? average : 0,\r\n      total: total > 0 ? total : 0,\r\n      months: getMonthsIncomes(incomes)\r\n    };\r\n  };\r\n\r\n  const handleDataChange = (start, end) => {\r\n    const newDate = {\r\n      start,\r\n      end\r\n    };\r\n    setDate(newDate);\r\n  };\r\n\r\n  const showCompanyDetail = () => {\r\n    return details.map(detail => (\r\n      <CompanyDetails\r\n        key={detail[0]}\r\n        className={detail[0]}\r\n        text={detail[1]}\r\n        data={detail[2]}\r\n      />\r\n    ));\r\n  };\r\n  return (\r\n    <div className=\"company\">\r\n      <Link to=\"/\">\r\n        <i className=\"material-icons\">arrow_back</i>Back\r\n      </Link>\r\n      <h2 className=\"company__header\">Company details</h2>\r\n      {showCompanyDetail()}\r\n      <Calendar date={date} onChange={handleDataChange} />\r\n      <h2 className=\"company__header\">Monthly incomes</h2>\r\n      <Chart data={periodIncomes.months} />\r\n    </div>\r\n  );\r\n}\r\nexport default Company;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./NotFoundPage.scss\";\r\n\r\nexport default function NotFoundPage() {\r\n  return (\r\n    <div className=\"page-not-found\">\r\n      <h1>Page Not Found</h1>\r\n      <div>404</div>\r\n      <p>Sorry, there is nothing to see here.</p>\r\n      <p>\r\n        <Link to=\"/\">Back to Home</Link>\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Table from \"../MyTable\";\nimport Company from \"../Company\";\nimport NotFoundPage from \"../NotFoundPage\";\nimport { sum } from \"../helpers\";\nimport \"./App.scss\";\n\nfunction App() {\n  const URL_COMPANIES = \"https://recruitment.hal.skygate.io/companies\";\n  const URL_INCOMES = \"https://recruitment.hal.skygate.io/incomes/\";\n  const [loading, setLoading] = useState(false);\n  const [hasError, setErrors] = useState(false);\n  const [companies, setCompanies] = useState([]);\n  const useMountEffect = fun => useEffect(fun, []);\n\n  async function fetchData() {\n    try {\n      setLoading(true);\n      let data = await (await fetch(URL_COMPANIES)).json();\n      let company = await Promise.all(\n        data.map(async item => {\n          const res = await (await fetch(URL_INCOMES + item.id)).json();\n          item.income = sum(res.incomes);\n          item.incomes = res.incomes.sort(\n            (a, b) => new Date(a.date) - new Date(b.date)\n          );\n          return item;\n        })\n      );\n      company.sort((a, b) => b.income * 1 - a.income * 1);\n      setCompanies(company);\n      setLoading(false);\n    } catch (err) {\n      setErrors(err);\n      throw hasError;\n    }\n  }\n\n  const searchCompany = id => {\n    const company = companies.filter(item => item.id * 1 === id * 1)[0];\n    return company;\n  };\n\n  useMountEffect(() => {\n    fetchData();\n  });\n\n  return (\n    <Router>\n      <Switch>\n        <Route\n          path=\"/\"\n          exact\n          component={() => <Table companies={companies} />}\n        />\n        <Route\n          path=\"/:id\"\n          component={props => (\n            <Company\n              company={searchCompany(props.match.params.id)}\n              loading={loading}\n            />\n          )}\n        />\n        <Route path=\"/\" component={NotFoundPage} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}